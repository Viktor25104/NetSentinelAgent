package netsentinel.agent.client;

import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.annotation.PostConstruct;
import lombok.RequiredArgsConstructor;
import netsentinel.agent.config.AgentProperties;
import netsentinel.agent.dto.agent.AgentResponse;
import netsentinel.agent.dto.agent.ServerInfoDto;
import netsentinel.agent.dto.system.ProcessInfoDto;
import netsentinel.agent.service.network.NetworkPortMonitoringService;
import netsentinel.agent.service.network.NetworkService;
import netsentinel.agent.service.system.*;
import org.springframework.messaging.simp.stomp.*;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.messaging.WebSocketStompClient;

import java.lang.reflect.Type;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.*;
import java.util.function.Supplier;

/**
 * WebSocketAgent ‚Äî –≥–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –∫–ª–∏–µ–Ω—Ç–∞ Net Sentinel, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞:
 * <ul>
 *   <li>—É—Å—Ç–∞–Ω–æ–≤–∫—É WebSocket STOMP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º</li>
 *   <li>–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞</li>
 *   <li>–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –º–µ—Ç—Ä–∏–∫</li>
 *   <li>–æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</li>
 *   <li>–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Å–≤—è–∑–∏</li>
 * </ul>
 *
 * @author Viktor Marymorych
 * @since 1.0
 */
@Component
@RequiredArgsConstructor
public class WebSocketAgent {

    // ============================ DEPENDENCIES ============================

    /**
     * –°–µ—Ä–≤–∏—Å—ã –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –û–°.
     */
    private final CpuService cpuService;
    private final DiskService diskService;
    private final NetworkService networkService;
    private final RamService ramService;
    private final ProcessService processService;
    private final NetworkPortMonitoringService networkPortMonitoringService;
    private final StartupService startupService;

    /** STOMP WebSocket –∫–ª–∏–µ–Ω—Ç */
    private final WebSocketStompClient stompClient;

    /** –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ –∏–∑ application.yml */
    private final AgentProperties props;

    /** JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä */
    private final ObjectMapper mapper = new ObjectMapper();

    /** STOMP —Å–µ—Å—Å–∏—è */
    private StompSession session;

    /** –¢–µ–∫—É—â–∏–π sessionId, –≤—ã–¥–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä–æ–º */
    private String sessionId;

    /** –ü–æ–¥–ø–∏—Å–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤ */
    private final Set<String> subscribedTopics = new HashSet<>();

    /** –§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è sessionId –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏ */
    private static final Path SESSION_FILE = Path.of("session_id.txt");

    // ============================ LIFECYCLE ============================

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
     * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç STOMP-–∫–ª–∏–µ–Ω—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É.
     */
    @PostConstruct
    public void connect() {
        try {
            sessionId = loadSessionId();

            stompClient.connectAsync(props.serverUrl(), new StompSessionHandlerAdapter() {
                @Override
                public void afterConnected(StompSession session, StompHeaders connectedHeaders) {
                    WebSocketAgent.this.session = session;
                    System.out.println("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω");

                    if (isValidSessionId(sessionId)) {
                        subscribeToTopics();
                    }

                    sendServerInfo();
                    subscribeToSessionChannel();
                }

                @Override
                public void handleTransportError(StompSession session, Throwable exception) {
                    System.err.println("‚ùå WebSocket –æ—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: " + exception.getMessage());
                    reconnectAsync();
                }
            }).exceptionally(ex -> {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket: " + ex.getMessage());
                reconnectAsync();
                return null;
            });
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: " + e.getMessage());
        }
    }

    // ============================ SUBSCRIBE ============================

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ sessionId –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ).
     */
    private void subscribeToSessionChannel() {
        String sessionChannel = "/queue/session/" + props.ip();
        session.subscribe(sessionChannel, new StompFrameHandler() {
            @Override
            public Type getPayloadType(StompHeaders headers) {
                return String.class;
            }

            @Override
            public void handleFrame(StompHeaders headers, Object payload) {
                sessionId = payload.toString();
                saveSessionId(sessionId);

                if (isValidSessionId(sessionId)) {
                    subscribeToTopics();
                } else {
                    System.err.println("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π sessionId");
                }
            }
        });
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ç–æ–ø–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.
     */
    private void subscribeToTopics() {
        if (session == null || !session.isConnected()) {
            System.err.println("‚ùå –°–µ—Å—Å–∏—è WebSocket –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞!");
            return;
        }

        if (!isValidSessionId(sessionId)) {
            System.err.println("‚ùå sessionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.");
            return;
        }

        // ==== –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ ====
        Map<String, Supplier<?>> subscriptions = Map.of(
                "info", this::buildServerInfo,
                "cpu", cpuService::getCpuInfo,
                "ram", ramService::getRamInfo,
                "disk", diskService::getDisksInfo,
                "network", networkService::getNetworkInfo,
                "process", processService::getProcessList,
                "ports", networkPortMonitoringService::getPorts,
                "startup", startupService::getStartupList
        );

        subscriptions.forEach((type, supplier) -> {
            String topic = "/topic/server/" + sessionId + "/" + type;

            if (!subscribedTopics.add(topic)) {
                System.out.println("‚ö†Ô∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ " + topic);
                return;
            }

            try {
                Thread.sleep(50); // –∑–∞—â–∏—Ç–∞ –æ—Ç TEXT_PARTIAL_WRITING
                session.subscribe(topic, new StompFrameHandler() {
                    @Override
                    public Type getPayloadType(StompHeaders headers) {
                        return String.class;
                    }

                    @Override
                    public void handleFrame(StompHeaders headers, Object payload) {
                        sendResponse(type, supplier.get());
                    }
                });
                System.out.println("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ " + topic + " –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ " + topic + ": " + e.getMessage());
            }
        });

        String commandTopic = "/topic/server/" + sessionId + "/command";
        if (!subscribedTopics.add(commandTopic)) {
            System.out.println("‚ö†Ô∏è –£–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ " + commandTopic);
            return;
        }

        try {
            Thread.sleep(50); // –∑–∞—â–∏—Ç–∞ –æ—Ç TEXT_PARTIAL_WRITING
            session.subscribe(commandTopic, new StompFrameHandler() {
                @Override
                public Type getPayloadType(StompHeaders headers) {
                    return String.class;
                }

                @Override
                public void handleFrame(StompHeaders headers, Object payload) {
                    String command = payload.toString().trim();
                    System.out.println("üì© –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: " + command);
                    handleCommand(command); // üî• —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                }
            });
            System.out.println("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ " + commandTopic + " –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ " + commandTopic + ": " + e.getMessage());
        }

    }


    // ============================ SEND ============================

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ /app/response
     *
     * @param type    —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏ (cpu, ram, ports –∏ —Ç.–¥.)
     * @param payload –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ (DTO)
     */
    private void sendResponse(String type, Object payload) {
        if (session != null && session.isConnected()) {
            try {
                var response = new AgentResponse(sessionId, type, payload);
                System.out.println("üì§ –ê–≥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç–≤–µ—Ç (type: " + type + "): " + response);
                session.send("/app/response", response);
            } catch (Exception e) {
                System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: " + e.getMessage());
            }
        }
    }

    private void sendProcessListChunks() {
        List<ProcessInfoDto> processes = processService.getProcessList();

        int chunkSize = 100;
        for (int i = 0; i < processes.size(); i += chunkSize) {
            List<ProcessInfoDto> chunk = processes.subList(i, Math.min(i + chunkSize, processes.size()));
            boolean isFinal = i + chunkSize >= processes.size();

            Map<String, Object> payload = Map.of(
                    "data", chunk,
                    "final", isFinal
            );

            sendResponse("process_chunk", payload);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
     */
    private void sendServerInfo() {
        sendResponse("register", buildServerInfo());
    }

    /**
     * –°–±–æ—Ä ServerInfoDto —Å –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏).
     *
     * @return DTO —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
     */
    private ServerInfoDto buildServerInfo() {
        return new ServerInfoDto(
                sessionId,
                props.name(),
                props.ip(),
                props.type(),
                "online",
                props.location(),
                24 * 60 * 60,
                (int) cpuService.getCpuLoad(),
                (int) ramService.getRamLoad(),
                diskService.getOverallDiskLoad(),
                props.companyId()
        );
    }

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞ (CPU, RAM, Disk –∏ –¥—Ä.) –Ω–∞ —Å–µ—Ä–≤–µ—Ä
     * –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ "online"
     * –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
     * <p>
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç {@link ServerInfoDto} –≤ –æ–±—ë—Ä—Ç–∫–µ {@link AgentResponse}
     * –Ω–∞ –∫–∞–Ω–∞–ª "/app/response" –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ WebSocket-—Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞.
     * <p>
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å {@link netsentinel.agent.dto.agent.AgentResponse}
     * –∏ {@link org.springframework.scheduling.annotation.Scheduled}
     */
    @Scheduled(fixedRate = 10_000)
    public void sendPeriodicInfoToServer() {
        if (session == null || !session.isConnected()) {
            System.out.println("‚ùå WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫.");
            return;
        }

        if (!isValidSessionId(sessionId)) {
            System.out.println("‚ùå sessionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –∞–≥–µ–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.");
            return;
        }

        try {
            ServerInfoDto info = buildServerInfo(); // —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥
            AgentResponse response = new AgentResponse(sessionId, "info", info);

            session.send("/app/response", response);
            System.out.println("üì§ –ê–≥–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ—Ç—Ä–∏–∫–∏ (info): " + response);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ info: " + e.getMessage());
            e.printStackTrace();
        }
    }


    // ============================ UTILS ============================

    private void handleCommand(String command) {
        if (command.startsWith("process_kill_")) {
            String pidStr = command.substring("process_kill_".length());
            try {
                int pid = Integer.parseInt(pidStr);
                boolean success = processService.killProcess(pid);
                System.out.println("üî™ –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å " + pid + ": " + (success ? "—É—Å–ø–µ—à–Ω–æ" : "–æ—à–∏–±–∫–∞"));
            } catch (NumberFormatException e) {
                System.err.println("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π PID: " + pidStr);
            }

        } else if (command.startsWith("autorun_toggle_")) {
            String serviceName = command.substring("autorun_toggle_".length());
            boolean success = startupService.toggleAutorun(serviceName);
            System.out.println("üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è " + serviceName + ": " + (success ? "—É—Å–ø–µ—à–Ω–æ" : "–æ—à–∏–±–∫–∞"));

        } else {
            System.out.println("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + command);
        }
    }



    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç reconnect –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.
     */
    private void reconnectAsync() {
        new Thread(() -> {
            int delay = 5000;
            for (int attempt = 1; attempt <= 5; attempt++) {
                try {
                    System.out.println("üîÅ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ " + delay / 1000 + "—Å (–ø–æ–ø—ã—Ç–∫–∞ " + attempt + ")");
                    Thread.sleep(delay);
                    connect();
                    return;
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
                delay *= 2;
            }
            System.err.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.");
        }).start();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç sessionId –≤ —Ñ–∞–π–ª.
     *
     * @param sessionId session UUID
     */
    private void saveSessionId(String sessionId) {
        try {
            Files.writeString(SESSION_FILE, sessionId, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è sessionId: " + e.getMessage());
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç sessionId –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
     *
     * @return —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ null
     */
    private String loadSessionId() {
        try {
            if (Files.exists(SESSION_FILE)) {
                return Files.readString(SESSION_FILE).trim();
            }
        } catch (Exception e) {
            System.err.println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ sessionId: " + e.getMessage());
        }
        return null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ sessionId –≤–∞–ª–∏–¥–Ω—ã–º.
     *
     * @param id —Å—Ç—Ä–æ–∫–∞ ID
     * @return true, –µ—Å–ª–∏ id –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ null
     */
    private boolean isValidSessionId(String id) {
        return id != null && !id.isBlank() && !"null".equalsIgnoreCase(id);
    }
}
